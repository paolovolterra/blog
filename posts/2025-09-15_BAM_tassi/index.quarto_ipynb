{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"BAM – Tassi e Prestiti\"\n",
        "format:\n",
        "  pdf:\n",
        "    engine: typst   # veloce, già presente nel tuo setup\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "output-file: BAM_tassi.pdf\n",
        "execute:\n",
        "  cache: true\n",
        "---\n",
        "\n",
        "# [MIR0300](https://infostat.bancaditalia.it/inquiry/home?spyglass/taxo:CUBESET=/PUBBL_00/PUBBL_00_02_01_04/PUBBL_00_02_01_04_02&ITEMSELEZ=MIR0300:true&OPEN=true/&ep:LC=IT&COMM=BANKITALIA&ENV=LIVE&CTX=DIFF&IDX=2&/view:CUBEIDS=MIR0300)"
      ],
      "id": "ac2117f3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "pd.set_option(\"display.max_columns\", None)   # mostra tutte le colonne\n",
        "pd.set_option(\"display.max_colwidth\", None)  # non troncare i contenuti delle celle\n",
        "pd.set_option(\"display.width\", None)         # non troncare la tabella a destra\n",
        "\n",
        "import sqlite3\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path\n",
        "import re\n",
        "import os"
      ],
      "id": "bbd5cdf5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "DB_PATH = \"D:/files/Bankit.sqlite\" \n",
        "conn = sqlite3.connect(DB_PATH)\n",
        "tabella = 'MIR0300'\n",
        "df = pd.read_sql(f\"SELECT DATA_OSS, SERIE, VALORE FROM {tabella} order by 2 desc,1\", conn)\n",
        "df[\"DATA_OSS\"] = pd.to_datetime(df[\"DATA_OSS\"])\n",
        "\n",
        "def parse_tokens(s: str):\n",
        "    parts = str(s).split(\".\")\n",
        "    return pd.Series({\n",
        "        \"COD_MIR\": parts[3] if len(parts) > 3 else None,\n",
        "        \"COD_DURATA\": parts[4] if len(parts) > 4 else None,\n",
        "        \"COD_IMPORTO\": parts[6] if len(parts) > 6 else None,\n",
        "    })\n",
        "\n",
        "parsed = df[\"SERIE\"].apply(parse_tokens)\n",
        "df = pd.concat([df, parsed], axis=1)\n",
        "map_labels = {\n",
        "    \"MIR5411\": \"Prestiti\", # diversi dai conti correnti, prestiti rotativi e carte di credito\n",
        "    \"MIR5414\": \"Prestiti garantiti\", #  diversi dai conti correnti, prestiti rotativi e carte di credito\n",
        "    \"MIR5427\": \"Prestiti effettivi\", # diversi dai conti correnti, prestiti rotativi e carte di credito\n",
        "    \"5\": \"< 1Y\",\n",
        "    \"9\": \"Tot.\",\n",
        "    \"46\": \"< 1M€\",\n",
        "    \"47\": \"> 1M€\",\n",
        "    \"1000\": \"Tot\",\n",
        "}\n",
        "df[\"MIR_DESC\"]     = df[\"COD_MIR\"].map(map_labels)\n",
        "df[\"DURATA_DESC\"]  = df[\"COD_DURATA\"].map(map_labels)\n",
        "df[\"IMPORTO_DESC\"] = df[\"COD_IMPORTO\"].map(map_labels)\n",
        "def compose_label(row):\n",
        "    parts = []\n",
        "    if pd.notna(row.get(\"MIR_DESC\")):     parts.append(row[\"MIR_DESC\"])\n",
        "    if pd.notna(row.get(\"DURATA_DESC\")):  parts.append(row[\"DURATA_DESC\"])\n",
        "    if pd.notna(row.get(\"IMPORTO_DESC\")): parts.append(row[\"IMPORTO_DESC\"])\n",
        "    return \" - \".join(parts) if parts else None\n",
        "df[\"SERIE_DECOD\"] = df.apply(compose_label, axis=1)\n",
        "tab = df.pivot_table(\n",
        "    index=\"DATA_OSS\",\n",
        "    columns=\"SERIE_DECOD\",\n",
        "    values=\"VALORE\",\n",
        "    aggfunc=\"sum\"\n",
        ").sort_index(ascending=False)\n",
        "tab"
      ],
      "id": "6de88aa5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "prestiti = tab[[\n",
        "    \"Prestiti - Tot. - Tot\",\n",
        "    \"Prestiti - Tot. - < 1M€\",\n",
        "    \"Prestiti - Tot. - > 1M€\"\n",
        "]]\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "# plt.plot(prestiti.index, prestiti[\"Prestiti - Tot. - Tot\"], label=\"Totale\")\n",
        "plt.plot(prestiti.index, prestiti[\"Prestiti - Tot. - < 1M€\"], label=\"< 1M€\")\n",
        "plt.plot(prestiti.index, prestiti[\"Prestiti - Tot. - > 1M€\"], label=\"> 1M€\")\n",
        "\n",
        "plt.title(\"Nuove erogazioni di prestiti alle imprese\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"Milioni di euro\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "c6c81935",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Calcolo di prestiti_smooth come media mobile a 6 mesi\n",
        "prestiti_smooth = (\n",
        "    tab[[\n",
        "        \"Prestiti - Tot. - Tot\",\n",
        "        \"Prestiti - Tot. - < 1M€\",\n",
        "        \"Prestiti - Tot. - > 1M€\"\n",
        "    ]]\n",
        "    .rolling(window=6, min_periods=1, center=True)\n",
        "    .mean()\n",
        ")\n",
        "\n",
        "prestiti_smooth.head(12)"
      ],
      "id": "9f8a7587",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(prestiti_smooth.index, prestiti_smooth[\"Prestiti - Tot. - < 1M€\"], \n",
        "         label=\"< 1M€ (media 6 mesi)\", linewidth=2, color=\"tab:blue\")\n",
        "plt.plot(prestiti_smooth.index, prestiti_smooth[\"Prestiti - Tot. - > 1M€\"], \n",
        "         label=\"> 1M€ (media 6 mesi)\", linewidth=2, color=\"tab:orange\")\n",
        "\n",
        "plt.title(\"Nuove erogazioni di prestiti alle imprese (media mobile 6 mesi)\", fontsize=14)\n",
        "plt.xlabel(\"Data\", fontsize=12)\n",
        "plt.ylabel(\"Milioni di euro\", fontsize=12)\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "a9ed4b09",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "col_big = \"Prestiti - Tot. - > 1M€\"\n",
        "col_small = \"Prestiti - Tot. - < 1M€\"\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(12,6))\n",
        "ax.plot(prestiti_smooth.index, prestiti_smooth[col_small], label=\"< 1M€ (media 6 mesi)\", linewidth=2)\n",
        "ax.plot(prestiti_smooth.index, prestiti_smooth[col_big],   label=\"> 1M€ (media 6 mesi)\", linewidth=2)\n",
        "\n",
        "ax.set_title(\"Nuove erogazioni di prestiti alle imprese (media mobile 6 mesi)\", fontsize=14, weight=\"bold\")\n",
        "ax.set_xlabel(\"Data\"); ax.set_ylabel(\"Milioni di euro\")\n",
        "ax.grid(True, linestyle=\"--\", alpha=0.4)\n",
        "ax.legend(frameon=False)\n",
        "\n",
        "def annotate_event(date_str, text, color=\"#333\", y_offset=8000):\n",
        "    \"\"\"Aggancia l’annotazione al timestamp dell’indice più vicino a date_str.\"\"\"\n",
        "    d = pd.to_datetime(date_str)\n",
        "    # trova l’indice più vicino\n",
        "    idx = prestiti_smooth.index.get_indexer([d], method=\"nearest\")[0]\n",
        "    x = prestiti_smooth.index[idx]\n",
        "    y = prestiti_smooth.loc[x, col_big]\n",
        "    if np.isnan(y):\n",
        "        # fallback: se NaN su quella serie, usa l'altra\n",
        "        y = prestiti_smooth.loc[x, col_small]\n",
        "    ax.annotate(\n",
        "        text, xy=(x, y), xytext=(x, y + y_offset),\n",
        "        arrowprops=dict(arrowstyle=\"->\", color=color, lw=1.2),\n",
        "        fontsize=10, color=color, weight=\"bold\"\n",
        "    )\n",
        "\n",
        "# Annotazioni (usa date approssimate: la funzione sceglie il punto più vicino)\n",
        "annotate_event(\"2008-09-01\", \"Crisi finanziaria globale\", \"#b22222\", y_offset=9000)\n",
        "annotate_event(\"2012-06-01\", \"Crisi debito sovrano\",     \"#8b0000\", y_offset=7000)\n",
        "annotate_event(\"2020-04-01\", \"Covid-19\",                 \"#006400\", y_offset=9000)\n",
        "annotate_event(\"2023-03-01\", \"Stretta BCE\",              \"#00008b\", y_offset=7000)\n",
        "\n",
        "# ax.axvspan(pd.Timestamp(\"2008-09-01\"), pd.Timestamp(\"2009-06-01\"), color=\"#b22222\", alpha=0.08)\n",
        "\n",
        "# Spine pulite\n",
        "for spine in ax.spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2838d10c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "col_big = \"Prestiti - Tot. - > 1M€\"\n",
        "col_small = \"Prestiti - Tot. - < 1M€\"\n",
        "base_date = \"2020-01-01\"\n",
        "\n",
        "# Copia del dataframe\n",
        "prestiti_base100 = prestiti.copy()\n",
        "\n",
        "# Normalizzazione in base 100 dal primo valore disponibile ≥ 2020-01\n",
        "for col in [col_big, col_small]:\n",
        "    base_value = prestiti_base100.loc[prestiti_base100.index >= base_date, col].iloc[0]\n",
        "    prestiti_base100[col] = prestiti_base100[col] / base_value * 100\n",
        "\n",
        "# Applica smoothing con media mobile 6 mesi centrata\n",
        "prestiti_smooth100 = prestiti_base100.rolling(window=6, center=True).mean()"
      ],
      "id": "3ab97455",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "base_year = 2020\n",
        "prestiti_base = prestiti_smooth.loc[str(base_year)]\n",
        "\n",
        "# calcolo della media 2020 per ogni colonna\n",
        "base_values = prestiti_base.mean()\n",
        "\n",
        "prestiti_index = prestiti_smooth / base_values * 100\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(prestiti_index.index, prestiti_index[col_small], label=\"< 1M€ (base 2020=100, media 6 mesi)\")\n",
        "plt.plot(prestiti_index.index, prestiti_index[col_big], label=\"> 1M€ (base 2020=100, media 6 mesi)\")\n",
        "\n",
        "plt.axhline(100, color=\"gray\", linestyle=\"--\")\n",
        "plt.title(\"Nuove erogazioni di prestiti alle imprese (base 2020=100, media 6 mesi)\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"Indice (2020=100)\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "e90de1be",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "col_small = \"Prestiti - Tot. - < 1M€\"\n",
        "col_big   = \"Prestiti - Tot. - > 1M€\"\n",
        "\n",
        "# --- funzione annotazione robusta (aggancia al punto più vicino) ---\n",
        "def annotate_event(ax, df, date_str, text, series_col, color=\"#333\", y_offset=6):\n",
        "    d = pd.to_datetime(date_str)\n",
        "    idx = df.index.get_indexer([d], method=\"nearest\")[0]\n",
        "    x  = df.index[idx]\n",
        "    y  = df.loc[x, series_col]\n",
        "    ax.annotate(text, xy=(x, y), xytext=(x, y + y_offset),\n",
        "                arrowprops=dict(arrowstyle=\"->\", color=color, lw=1.2),\n",
        "                fontsize=10, color=color, weight=\"bold\")\n",
        "\n",
        "# --- plot base 2020=100 con media 6 mesi (già in prestiti_index) ---\n",
        "fig, ax = plt.subplots(figsize=(12,6))\n",
        "\n",
        "ax.plot(prestiti_index.index, prestiti_index[col_small],\n",
        "        label=\"< 1M€ (base 2020=100, media 6 mesi)\", lw=2, color=\"#1f77b4\")\n",
        "ax.plot(prestiti_index.index, prestiti_index[col_big],\n",
        "        label=\"> 1M€ (base 2020=100, media 6 mesi)\", lw=2, color=\"#ff7f0e\")\n",
        "\n",
        "ax.set_title(\"Nuove erogazioni di prestiti alle imprese (base 2020=100, media 6 mesi)\",\n",
        "             fontsize=14, weight=\"bold\")\n",
        "ax.set_xlabel(\"Data\"); ax.set_ylabel(\"Indice (2020=100)\")\n",
        "ax.axhline(100, color=\"gray\", ls=\"--\", lw=1)\n",
        "ax.grid(True, ls=\"--\", alpha=0.5)\n",
        "\n",
        "# --- bande verticali per i periodi-chiave ---\n",
        "bands = [\n",
        "    (\"2008-09-01\", \"2009-06-01\", \"#b22222\", 0.08, \"Crisi 2008-09\"),\n",
        "    (\"2011-07-01\", \"2012-12-01\", \"#8b0000\", 0.08, \"Crisi debito sovrano\"),\n",
        "    (\"2020-03-01\", \"2021-03-01\", \"#006400\", 0.08, \"Covid-19\"),\n",
        "    (\"2022-07-01\", \"2023-12-01\", \"#00008b\", 0.08, \"Stretta BCE\"),\n",
        "]\n",
        "for start, end, color, alpha, _ in bands:\n",
        "    ax.axvspan(pd.to_datetime(start), pd.to_datetime(end), color=color, alpha=alpha)\n",
        "\n",
        "# --- frecce/etichette (uso la serie >1M€ per ancorare le frecce) ---\n",
        "annotate_event(ax, prestiti_index, \"2008-09-01\", \"Crisi finanziaria globale\",\n",
        "               col_big, color=\"#b22222\", y_offset=4)\n",
        "annotate_event(ax, prestiti_index, \"2012-06-01\", \"Crisi debito sovrano\",\n",
        "               col_big, color=\"#8b0000\", y_offset=4)\n",
        "annotate_event(ax, prestiti_index, \"2020-05-01\", \"Covid-19\",\n",
        "               col_big, color=\"#006400\", y_offset=6)\n",
        "annotate_event(ax, prestiti_index, \"2023-03-01\", \"Stretta BCE\",\n",
        "               col_big, color=\"#00008b\", y_offset=4)\n",
        "\n",
        "# legenda pulita e stile minimal\n",
        "ax.legend(frameon=False, loc=\"upper right\")\n",
        "for s in ax.spines.values():\n",
        "    s.set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "57a059af",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Ottimo, ora il **YoY (Year-over-Year)** è molto più leggibile 👍.\n",
        "Ti faccio una lettura dei trend principali mettendoli in relazione con gli eventi storici ed economici che spiegano le dinamiche delle nuove erogazioni di prestiti alle imprese:\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2003-2007: espansione pre-crisi\n",
        "\n",
        "* Le nuove erogazioni, soprattutto **>1M€**, crescono con tassi YoY anche del +20/40%.\n",
        "* **Cause**: fase di crescita economica mondiale, credito abbondante, tassi BCE relativamente bassi, forte leva finanziaria nelle imprese.\n",
        "* È il periodo in cui il credito bancario si espande prima della crisi subprime.\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2008-2012: crisi finanziaria e crisi del debito sovrano\n",
        "\n",
        "* **Crollo del 2008-09**: YoY crolla a –40/–50% → riflette il credit crunch dovuto al fallimento Lehman e al congelamento dei mercati interbancari.\n",
        "* **Breve rimbalzo 2010** (stimoli fiscali e monetari post-crisi).\n",
        "* **Nuovo calo 2011-2012**: crisi del debito sovrano europeo → banche italiane riducono fortemente l’offerta di credito, soprattutto per i prestiti >1M€ (imprese medio-grandi).\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2013-2016: stagnazione e deleveraging\n",
        "\n",
        "* YoY mediamente negativo o intorno allo zero → segnale di deleveraging: le imprese riducono l’indebitamento, le banche razionano il credito.\n",
        "* **Cause**: recessione italiana, stretta regolamentare (Basilea 3), crescita bassa, aumento sofferenze bancarie.\n",
        "* Prestiti <1M€ (PMI e microimprese) più stabili ma comunque su livelli bassi.\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2017-2019: ripresa moderata\n",
        "\n",
        "* Tassi YoY tornano positivi, ma senza picchi.\n",
        "* **Cause**: politica monetaria ultra-espansiva BCE (QE, tassi negativi), spread BTP-Bund sotto controllo, fiducia in miglioramento.\n",
        "* La ripresa resta fragile: crescita limitata, domanda di credito non esplosiva.\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2020-2021: shock pandemico\n",
        "\n",
        "* **Crollo immediato** marzo 2020 (lockdown, incertezza).\n",
        "* **Boom successivo**: misure straordinarie (garanzie pubbliche MCC, moratorie, liquidità BCE) → picco YoY oltre +60% sia <1M€ che >1M€.\n",
        "* Questa fase segna il massimo delle nuove erogazioni negli ultimi 20 anni.\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2022-2023: inflazione e stretta BCE\n",
        "\n",
        "* YoY torna fortemente negativo (–20/–30%).\n",
        "* **Cause**: aumento tassi BCE dal luglio 2022, inflazione elevata, costo del credito schizzato al 6-7% medio.\n",
        "* Colpisce soprattutto prestiti >1M€, cioè le imprese più esposte a fabbisogni di capitale per investimenti.\n",
        "\n",
        "---\n",
        "\n",
        "### 🔹 2024-2025: stabilizzazione fragile\n",
        "\n",
        "* YoY rimane volatile ma meno estremo.\n",
        "* **Cause**: politica monetaria ancora restrittiva, domanda debole, incertezza geopolitica.\n",
        "* Si intravede una differenza strutturale: i <1M€ tendono a essere più resilienti, mentre i >1M€ mostrano maggiore ciclicità.\n",
        "\n",
        "---\n",
        "\n",
        "📌 **Sintesi:**\n",
        "\n",
        "* I prestiti **>1M€** sono molto più sensibili al ciclo economico e agli shock finanziari → riflettono investimenti e grandi operazioni aziendali.\n",
        "* I prestiti **<1M€** sono più legati al capitale circolante delle PMI → meno volatili, ma soffrono nelle fasi di stretta creditizia prolungata.\n",
        "* I picchi YoY (positivi e negativi) coincidono con **crisi sistemiche o interventi pubblici** (2008, 2012, 2020, 2022).\n",
        "\n",
        "---\n",
        "\n",
        "Vuoi che ti preparo un **grafico annotato** (con frecce e label “Crisi 2008”, “QE BCE”, “Covid”, “Stretta 2022”) così diventa anche un ottimo materiale da presentazione?"
      ],
      "id": "6849264e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Calcola YoY (variazione % rispetto a 12 mesi prima)\n",
        "prestiti_yoy = prestiti.pct_change(periods=12) * 100\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(prestiti_yoy.index, prestiti_yoy[\"Prestiti - Tot. - < 1M€\"], label=\"< 1M€\")\n",
        "plt.plot(prestiti_yoy.index, prestiti_yoy[\"Prestiti - Tot. - > 1M€\"], label=\"> 1M€\")\n",
        "\n",
        "plt.axhline(0, color=\"gray\", linewidth=0.8, linestyle=\"--\")\n",
        "plt.title(\"Nuove erogazioni di prestiti alle imprese – Variazioni % YoY\")\n",
        "plt.xlabel(\"Data\")\n",
        "plt.ylabel(\"% YoY\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "4091cf2a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- 1. YoY mensile ---\n",
        "yoy_m = prestiti.pct_change(12) * 100\n",
        "\n",
        "# --- 2. YoY trimestrale ---\n",
        "prestiti_q = prestiti.resample(\"Q\").sum()\n",
        "yoy_q = prestiti_q.pct_change(4) * 100\n",
        "\n",
        "# --- 3. YoY su media mobile annuale ---\n",
        "prestiti_ma = prestiti.rolling(12).mean()\n",
        "yoy_ma = prestiti_ma.pct_change(12) * 100\n",
        "\n",
        "# --- Plot ---\n",
        "fig, axes = plt.subplots(3, 1, figsize=(12, 14), sharey=False)\n",
        "\n",
        "# 1. Mensile\n",
        "axes[0].plot(yoy_m.index, yoy_m[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[0].plot(yoy_m.index, yoy_m[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[0].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[0].set_title(\"YoY mensile\")\n",
        "axes[0].set_ylabel(\"%\")\n",
        "axes[0].legend(); axes[0].grid(True)\n",
        "\n",
        "# 2. Trimestrale\n",
        "axes[1].plot(yoy_q.index, yoy_q[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[1].plot(yoy_q.index, yoy_q[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[1].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[1].set_title(\"YoY trimestrale\")\n",
        "axes[1].set_ylabel(\"%\")\n",
        "axes[1].legend(); axes[1].grid(True)\n",
        "\n",
        "# 3. Media mobile annuale\n",
        "axes[2].plot(yoy_ma.index, yoy_ma[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[2].plot(yoy_ma.index, yoy_ma[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[2].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[2].set_title(\"YoY su medie mobili annuali (12m MA)\")\n",
        "axes[2].set_ylabel(\"%\")\n",
        "axes[2].legend(); axes[2].grid(True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ef6e4561",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# --- 1. MoM mensile ---\n",
        "mom_m = prestiti.pct_change(1) * 100\n",
        "\n",
        "# --- 2. MoM trimestrale ---\n",
        "prestiti_q = prestiti.resample(\"Q\").sum()\n",
        "mom_q = prestiti_q.pct_change(1) * 100\n",
        "\n",
        "# --- 3. MoM su media mobile 3 mesi ---\n",
        "prestiti_ma3 = prestiti.rolling(3).mean()\n",
        "mom_ma3 = prestiti_ma3.pct_change(1) * 100\n",
        "\n",
        "# --- Plot ---\n",
        "fig, axes = plt.subplots(3, 1, figsize=(12, 14), sharey=False)\n",
        "\n",
        "# 1. Mensile\n",
        "axes[0].plot(mom_m.index, mom_m[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[0].plot(mom_m.index, mom_m[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[0].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[0].set_title(\"MoM mensile\")\n",
        "axes[0].set_ylabel(\"%\")\n",
        "axes[0].legend(); axes[0].grid(True)\n",
        "\n",
        "# 2. Trimestrale\n",
        "axes[1].plot(mom_q.index, mom_q[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[1].plot(mom_q.index, mom_q[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[1].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[1].set_title(\"MoM trimestrale\")\n",
        "axes[1].set_ylabel(\"%\")\n",
        "axes[1].legend(); axes[1].grid(True)\n",
        "\n",
        "# 3. Media mobile 3 mesi\n",
        "axes[2].plot(mom_ma3.index, mom_ma3[\"Prestiti - Tot. - < 1M€\"], label=\"<1M€\")\n",
        "axes[2].plot(mom_ma3.index, mom_ma3[\"Prestiti - Tot. - > 1M€\"], label=\">1M€\")\n",
        "axes[2].axhline(0, color=\"gray\", ls=\"--\", lw=0.8)\n",
        "axes[2].set_title(\"MoM su medie mobili 3 mesi\")\n",
        "axes[2].set_ylabel(\"%\")\n",
        "axes[2].legend(); axes[2].grid(True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "62d75afa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df['SERIE'].unique()"
      ],
      "id": "bbdae3cf",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\paolo\\AppData\\Local\\Programs\\Python\\Python311\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}